<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AmazonSimulator VS</name>
    </assembly>
    <members>
        <member name="M:Models.Barrels.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Constructor for creating Barrels with a position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rotationX"></param>
            <param name="rotationY"></param>
            <param name="rotationZ"></param>
        </member>
        <member name="M:Models.Barrels.#ctor(Models.Point)">
            <summary>
            Constructor for creating Barrels with a point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Barrels.AssignPoint(Models.Point)">
            <summary>
            Method to set the point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Boat.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Constructor for creating the Boat with a position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rotationX"></param>
            <param name="rotationY"></param>
            <param name="rotationZ"></param>
        </member>
        <member name="M:Models.Boat.#ctor(Models.Point)">
            <summary>
            Constructor for creating the Boat with a point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Boat.AddBarrel(Models.Barrels)">
            <summary>
            Method to add barrel to list and move them to the specified point
            </summary>
            <param name="barrel"></param>
        </member>
        <member name="M:Models.Boat.RemoveBarrels(Models.Robot)">
            <summary>
            Method to remove barrel to list and move them to the specified point
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Models.Boat.RemoveBarrel(Models.Point)">
            <summary>
            Method to remove barrel to list and move them to the specified point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Boat.SwitchLoadable">
            <summary>
            Method to check if the Boat is loadable and can leave
            </summary>
        </member>
        <member name="M:Models.Boat.Move(Models.Point)">
            <summary>
            Method for movement of the object
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Boat.AddTask(Models.BoatTask)">
            <summary>
            Method to add tasks to the object
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Models.Boat.Update(System.Int32)">
            <summary>
            Update method, used to make the application tick 50 times every second
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Models.BoatDump.#ctor(Models.Point)">
            <summary>
            Method to set the dumping location of the boat
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.BoatDump.StartTask(Models.Boat)">
            <summary>
            Method to start unloading/dumping the boat contents
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Models.BoatDump.TaskComplete(Models.Boat)">
            <summary>
            Unloads the boat contents until the contents are 0
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Models.BoatLoad.StartTask(Models.Boat)">
            <summary>
            Method to start loading the boat by setting the switchloadable to true
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Models.BoatLoad.TaskComplete(Models.Boat)">
            <summary>
            Method to stop loading and make the boat leave if it has 3 barrels
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Models.BoatMove.#ctor(Models.Point)">
            <summary>
            Method to set the moving point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.BoatMove.StartTask(Models.Boat)">
            <summary>
            Method to move to the specified point
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Models.BoatMove.TaskComplete(Models.Boat)">
            <summary>
            Method to check if the moving is complete and returns true if this is the case
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Models.BoatTeleport.StartTask(Models.Boat)">
            <summary>
            Method to set the moving point used for the boat
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Models.BoatTeleport.TaskComplete(Models.Boat)">
            <summary>
            Method to move the boat to the specified point
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Graph.#ctor(System.Collections.Generic.List{Models.Point})">
            <summary>
            Constructor for the graph/list with all the points
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Models.LightHouse.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Constructor for the Lighthouse 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rotationX"></param>
            <param name="rotationY"></param>
            <param name="rotationZ"></param>
        </member>
        <member name="M:Models.LightHouse.#ctor(Models.Point)">
            <summary>
            Constructor for the Lighthouse to add it to a point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Model3D.Move(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            The base move method, changing the position and the needsupdate
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Models.Model3D.Rotate(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            The base rotate method, changing the rotation and the needsupdate
            </summary>
            <param name="rotationX"></param>
            <param name="rotationY"></param>
            <param name="rotationZ"></param>
        </member>
        <member name="M:Models.Model3D.Update(System.Int32)">
            <summary>
            The base update method, used to make the application tick 50 times every second
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Point.#ctor(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            /The constructor for creating a point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Models.Point.AddNode(Models.Point)">
            <summary>
            Method to add a point as a node to the list of nodes
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Models.Point.AddNode(System.Collections.Generic.List{Models.Point})">
            <summary>
            Method add a list of points to a nodelist
            </summary>
            <param name="nodeList"></param>
        </member>
        <member name="M:Models.Point.AddBarrel(Models.Barrels)">
            <summary>
            Method to assign barrel to this point
            </summary>
            <param name="barrel"></param>
        </member>
        <member name="M:Models.Point.SetCost(System.Decimal)">
            <summary>
            Method to set the cost of a point, used in the Dijkstra algorithm
            </summary>
            <param name="cost"></param>
        </member>
        <member name="M:Models.Point.SetPath(Models.Point)">
            <summary>
            Method to set the path of a point or points, used in the Dijkstra algorithm
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Models.Robot.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Constructor for creating the robot with a position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rotationX"></param>
            <param name="rotationY"></param>
            <param name="rotationZ"></param>
        </member>
        <member name="M:Models.Robot.#ctor(Models.Point)">
            <summary>
            Constructor for creating the robot with a point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Robot.AddTask(Models.RobotTask)">
            <summary>
            Method used to add a task to the object
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Models.Robot.MoveOverPath(Models.Graph,Models.Point)">
            <summary>
            The main method used to make the robot move over the shortest path
            </summary>
            <param name="pointGraph"></param>
            <param name="point"></param>
        </member>
        <member name="M:Models.Robot.Move(Models.Point)">
            <summary>
            Method for movement of the object
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Robot.IsOnPoint(Models.Robot,Models.Point)">
            <summary>
            Method used to check if the robot is on a certain point, returning true or false based on location
            </summary>
            <param name="robot"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Robot.AssignPoint(Models.Point)">
            <summary>
            Method used to set the desiredpoint to another point, making the robot go there
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Robot.CurrentPoint(Models.Point)">
            <summary>
            Method used to set the currenpoint to another point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Robot.AssignBarrel(Models.Barrels)">
            <summary>
            Method used to "pick up" the barrel and make it hover above the robot
            </summary>
            <param name="barrel"></param>
        </member>
        <member name="M:Models.Robot.RemoveBarrel(Models.Boat)">
            <summary>
            Method to remove a barrel from a boat
            </summary>
            <param name="boat"></param>
        </member>
        <member name="M:Models.Robot.RemoveBarrel(Models.Point)">
            <summary>
            Method to remove a barrel from a point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Models.Robot.Update(System.Int32)">
            <summary>
            Default update method modified to make the robot move with the barrel at the same time
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Models.RobotDropOff.#ctor(Models.Boat)">
            <summary>
            Method to make the robot drop the barrel at the boat
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Models.RobotDropOff.#ctor(Models.Point)">
            <summary>
            Method to make the robot drop the barrel at a point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Models.RobotDropOff.StartTask(Models.Robot)">
            <summary>
            Method to check if the boat is loadable or not, and removes or loads barrels if needed
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Models.RobotDropOff.TaskComplete(Models.Robot)">
            <summary>
            Unloads the robot contents
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Models.RobotMove.#ctor(Models.Graph,Models.Point)">
            <summary>
            Method used to set the path the robot has to take using a graph and a point
            </summary>
            <param name="graph"></param>
            <param name="point"></param>
        </member>
        <member name="M:Models.RobotMove.StartTask(Models.Robot)">
            <summary>
            Method used to move the robot over said path
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Models.RobotMove.TaskComplete(Models.Robot)">
            <summary>
            Method to set the currentpoint to the actual point the robot is standing on to stop it from moving any further 
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Models.RobotPickUp.StartTask(Models.Robot)">
            <summary>
            Method used to assign a barrel to a robot along with the point
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Models.RobotPickUp.TaskComplete(Models.Robot)">
            <summary>
            Method to return a boolean value wether the robot has a barrel or not
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Models.World.#ctor">
            <summary>
            Constructor for the main World method, where all the objects get added
            </summary>
        </member>
        <member name="M:Models.World.CreateRobot(Models.Point)">
            <summary>
            The following methods are used to add the objects to the world
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Models.World.Subscribe(System.IObserver{Controllers.Command})">
            <summary>
            Default code that was already here, used for internal communication between the observer and the application itself
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Models.World.Update(System.Int32)">
            <summary>
            MEthod that makes the game update 50 times per second
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
    </members>
</doc>
